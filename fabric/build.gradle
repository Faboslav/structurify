plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version

def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}

def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-fabric-mc${minecraftVersion}-${mod_version}")
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	silentMojangMappingsLicense()

	runConfigs.all {
		ideConfigGenerated true
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.officialMojangMappings()

	// Core dependencies
	modImplementation "net.fabricmc:fabric-loader:${prop('fabric_loader_version')}"
	modApi "net.fabricmc.fabric-api:fabric-api:${prop('fabric_api_version')}+${prop('minecraft_version')}"

	// Required client
	// YetAnotherConfigLib (https://docs.isxander.dev/yet-another-config-lib)
	if (minecraftVersion == '1.20.2') {
		modImplementation(modrinth("yacl", "${prop('yacl_version')}-fabric"))
	} else {
		modImplementation(modrinth("yacl", "${prop('yacl_version')}-fabric"))
	}

	// Optional client
	// Mod menu (https://modrinth.com/mod/modmenu)
	modImplementation("com.terraformersmc:modmenu:${prop('mod_menu_version')}") { transitive = false }

	// Compat
	// Global Datapacks
	if (prop('global_datapacks_version') != '') {
		modCompileOnly(modrinth("datapacks", "${prop('global_datapacks_version')}")) { transitive = false }
	}

	// Global Packs
	if (prop('global_packs_version') != '') {
		if (minecraftVersion == '1.20.1') {
			modCompileOnly(modrinth("globalpacks", "${prop('global_packs_version')}_fabric")) { transitive = false }
		} else if (minecraftVersion == '1.21.1') {
			modCompileOnly(modrinth("globalpacks", "${prop('global_packs_version')}")) { transitive = false }
		}
	}

	// Repurposed Structures
	if (prop('repurposed_structures_version') != '' && prop('midnight_lib_version') != '') {
		modImplementation(modrinth("repurposed-structures-fabric", "${prop('repurposed_structures_version')}-fabric")) { transitive = false }
		modImplementation(modrinth("midnightlib", "${prop('midnight_lib_version')}-fabric")) { transitive = false }

		modCompileOnly(modRuntimeOnly(group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'))
		modCompileOnly(modRuntimeOnly(group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'))
	}

	common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
	shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionFabric')) { transitive false }
}

processResources {
	def expandProps = [
		"modJavaVersion"     : prop('mod_java_version'),
		'modId'              : mod_id,
		'modName'            : mod_name,
		'modDescription'     : mod_description,
		'modVersion'         : mod_version,
		'modAuthor'          : mod_author,
		"minecraftVersion"   : prop('minecraft_version'),
		"minMinecraftVersion": prop('min_minecraft_version'),
		"fabricLoaderVersion": prop('fabric_loader_version'),
		"fabricApiVersion"   : prop('fabric_api_version'),
		"yaclVersion"        : prop('yacl_version'),
	]

	filesMatching(['fabric.mod.json', '*.mixins.json']) {
		expand expandProps
	}

	inputs.properties(expandProps)
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

jar {
	archiveClassifier.set("dev")
}

remapJar {
	injectAccessWidener.set(true)
	input.set(shadowJar.archiveFile)
	dependsOn(shadowJar)
	archiveClassifier.set(null)
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
	targetCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.getRelease().set(prop('mod_java_version') as Integer)
}

repositories {
	// CurseForge
	maven { url "https://www.cursemaven.com" }

	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }
	maven { url "https://maven.quiltmc.org/repository/release" }

	// Mod Menu.
	maven { url 'https://maven.terraformersmc.com/releases/' }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}

	// Random
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}